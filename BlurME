#!/bin/sh
# Mod Branch
# ~ This script of BlurME is for Modular plugins
# BlurME is dedicated to You!
wp_blur="$PWD///output.png"
get_ws () {
while read -r ws status _; do
    case $status in
        '*') printf '%s\n' "$ws"
    esac
done <<EOF
$(wmctrl -d)
EOF
}

get_wids () {
    current="$(get_ws)"
    while read -r wid ws _; do
        case $ws in
            "$current") printf '%s' "$wid"
        esac
    done <<EOF
$(wmctrl -l)
EOF
}
KDEB() {
    dbus-send --session --dest=org.kde.plasmashell --type=method_call /PlasmaShell org.kde.PlasmaShell.evaluateScript 'string:var Desktops = desktops();for (i=0;i<Desktops.length;i++) {d = Desktops[i];d.wallpaperPlugin = "org.kde.image";d.currentConfigGroup = Array("Wallpaper","org.kde.image","General");d.writeConfig("Image", "file:///'"$wp_blur"'");}'
}
KDEW() {
    dbus-send --session --dest=org.kde.plasmashell --type=method_call /PlasmaShell org.kde.PlasmaShell.evaluateScript 'string:var Desktops = desktops();for (i=0;i<Desktops.length;i++) {d = Desktops[i];d.wallpaperPlugin = "org.kde.image";d.currentConfigGroup = Array("Wallpaper","org.kde.image","General");d.writeConfig("Image", "file://'"$wp"'");}'
}

WPO() {
    KDEW
    $command "$wp"
}
usage () {
cat << EOF
${0##*/}: Blurs the wallpaper!
usage: ${0##*/} [-h|-b|-w|-c]
-w/--windows: Max window value "1-∞"
-b/--blur: Set blur strength "2-∞"
-c/--wallpaper: Sets wallpaper location 
--command/--c: Set wallpaper command - Defaults to "feh" - If not set
--fade-en/-f: Enables fade - overrides --command to "set-wallpaper"
--fade-sec/-f-s: Set fade time "1-∞"
--verbose/-v: Enables verbose output
--blur-a/-b-a: Diables usage of "convert"
--image/-i: Use with "--blur-a", sets blurred wallpaper location
-h/--help: That print's this silly
EOF
}
root() {

trap 'prinf "SIGINT caught!\n"; WPO; exit 1' INT TERM
while sleep 1
do
get_ws
wids="$(get_wids)"
wids=${#wids}
wids="$((wids / 10))"
if [ "$V" = "1" ]; then
    printf '%b\n' "$wp_blur"
fi
if [ "$V" = "1" ]; then
    printf 'Bluring with scale of %b'"$blur" '\n'
fi
if [ -z "$wp" ]; then
    if [ "$V" = "1" ]; then
        printf "No wallpaper set\n"
    fi
    usage && exit 1
else
    if [ "$V" = "1" ]; then
        printf 'Wallpaper is %b\n'"$wp"
    fi
fi
if [ -n "$output" ]; then
    if [ "$V" = "1" ]; then
        printf 'saving to %b\n'"$output"
    fi
    wp_blur="$output///output.png"
else
    wp_blur="$output///output.png"
    output="$PWD"
fi
if [ "$V" = "1" ]; then
    printf 'Blurring with scale of %b\n'"$blur"
fi
if [ "$blur" -ge "2" ]; then
    if [ "$V" = "1" ]; then
        printf 'Blurring, image with scale of %b\n' "$blur"
    fi
    if ! ls "$wp_blur"; then
	    if [ -z "$blurA" ]; then
            convert "$wp" -blur 0x"$blur" "$output"/output.png
        else
            if [ "$V" = "1" ]; then
                printf 'Disabled automatic blur\n'
            fi
        fi
	    if [ "$V" = "1" ]; then
            printf 'Blurred!\n'
        fi
    else
        if [ "$V" = "1" ]; then
	       printf 'Blurred image found, skipping\n'
        fi
    fi
else
    if [ "$V" = "1" ]; then
        printf "'-b' not used!?\n"
        printf 'Segmeant Fault\n'
    fi
    usage && exit 1
fi

if [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; then
    if [ "$V" = "1" ]; then
        printf "%b Windows/Widgets Are Open" "$wids"
    fi
    if [ -n "$wid" ]; then
        if [ "$V" = "1" ]; then
            printf 'Widget Amount is %b\n' "$wid"
        fi
    else
        wid="2"
    fi
if [ "$wids" -le "$wid" ]; then
    if [ "$V" = "1" ]; then
        printf "Setting Non-Blurred Wallpaper\n"
    fi
    KDEW
else
    if [ "$wids" = "1" ]; then
        if [ "$V" = "1" ]; then
            printf "Setting Non-Blurred Wallpaper\n"
        fi    
        KDEW
    else
      KDEB
    fi
  fi
else
	if [ "$DESKTOP_SESSION" = "/usr/share/xsessions/plasma" ]; then
		if [ -n "$wid" ]; then
			if [ "$V" = "1" ]; then
                printf 'Widget Amount is %b\n' "$wid"
            fi
		else
 			wid="2"
    		fi
    		if [ "$wids" -le "$wid" ]; then
      			if [ "$V" = "1" ]; then
                    printf "Setting Non-Blurred Wallpaper\n"
      			fi
                KDEW
    		else
      			if [ "$wids" = "1" ]; then
        				if [ "$V" = "1" ]; then
                            printf "Setting Non-Blurred Wallpaper\n"
        				fi
                        KDEW
      			else
                        if [ "$V" = "1" ]; then
        				    prtinf "Blurring\n"
        				fi
                        KDEB
        				if [ "$V" = "1" ]; then
                            printf "Blurred\n"
                        fi
      			fi
    	fi
else
    while sleep 1
    do
	get_ws
	wids="$(get_wids)"
	wids=${#wids}
	wids="$((wids / 10))"
    if [ -z "$command" ]; then
        if [ -z "$fade" ]; then
            command="feh --bg-fill"
            if [ "$V" = "1" ]; then
                printf 'Using default (FEH)\n'
            fi
        else
            command="set-wallpaper --fade-secs $fade_sec --image"
            if [ "$V" = "1" ]; then
                printf 'Fade was enabled using set-wallpaper\n'
            fi
        fi
    fi
    if [ "$command" = "set-wallpaper --fade-secs $fade_sec --image" ]; then
        if [ -z "$fade_sec" ]; then
            fade_sec="1"
            if [ "$V" = "1" ]; then
                printf 'Fade_sec="%b"\n' "$fade_sec"
            fi
        fi
    fi    
	if [ "$wids" -le "$wid" ]; then
		if [ "$V" = "1" ]; then
            printf "%b Windows are open\n" "$wids"
        fi
            if [ "$V" = "1" ]; then
                printf "Max number of windows is %b]n" "$wid"
            fi
		if [ "$type" != "un-blur" ]; then
			$command "$wp"
            if [ "$V" = "1" ]; then
			     printf "Setting non-blurred wallpaper\n"
            fi
		else
            if [ "$V" = "1" ]; then
			     printf 'Waiting\n' && sleep 1
            else
                sleep 1
            fi
		fi
		type="un-blur"
        	else
                if [ "$V" = "1" ]; then    
                    printf "Max window number is %b\n""$wid"
                    printf "current is %b\n""$wids"
               fi
		if [ "$type" != "blur" ]; then
			$command "$wp_blur"
            if [ "$V" = "1" ]; then
                printf "Bluring"
            fi
		else
            if [ "$V" = "1" ]; then
			     printf 'Waiting\n' && sleep 1
           fi
		fi
		type="blur"
         	fi
    done
  fi
fi
done
}
main () {
while [ "$1" ]; do
    case $1 in
        -h|--help)
            usage && exit 1
            ;;
        -b|--blur)
            blur=$2
            shift 1
            ;;
        -w|--windows)
            wid=$2
            shift 1
            ;;
        -c|--wallpaper)
            wp=$2
            shift 1
            ;;
        --image|-i)
            wp_blur=$2
            shift 1
            ;;
        --command|--c)
            command=$2
            shift 1
            ;;
        --fade-en|-f)
            fade="1"
            shift 1
            ;;
        --fade-sec|-f-s)
            fade_sec=$2
            shift 1
            ;;
        --verbose|-v)
            V="1"
            ;;
        --blur-a|-b-a)
            blurA="1"
            ;;
        *)
            usage && exit 1
            ;;
    esac
    shift 1
done
}
main "$@"
root
